Variables in JavaScript
-----------------------
- A variable is a container for storing data values, In JavaScript, a variable can hold a 
  variety of data types
- Variables in JavaScript can store values such as numbers, string, objects, and more.
- JavaScript is dynamically typed, meaning variables do not require a specified type when
  declared, and the type of a variable can change during the execution.

Types of Variables in JavaScript
--------------------------------
1. var
~~~~~~
● Scope: Function-scoped or globally-scoped if declared outside of a function.
● Hoisting: Variables declared with var are hoisted, meaning they are moved to the top of 
    their scope during execution, but are initialized with undefined until the code reaches 
    the variable declaration.
● Re-declaration: You can re-declare variables declared with var within the same scope 
    without causing errors.
- Example:
    var name = "John";
    var name = "Alice";  // No error

2. let
~~~~~~
● Scope: Block-scoped, meaning they only exist within the nearest enclosing block ({}).
● Hoisting: Variables declared with let are hoisted, but not initialized. Accessing them 
    before the declaration results in a ReferenceError (due to the "temporal dead zone").
● Re-declaration: You cannot re-declare a let variable within the same block scope.
- Example:
    let age = 30;
    age = 35;  // Reassigning is allowed
    
    // let age = 40; // Error: Cannot redeclare block-scoped variable 'age'

3. const
~~~~~~~~
● Scope: Block-scoped, just like let.
● Hoisting: const variables are also hoisted but cannot be accessed before the declaration 
    due to the temporal dead zone.
● Re-declaration: You cannot reassign or re-declare a const variable within the same scope. 
    Once a value is assigned to a const variable, it cannot be changed.
● Note: While the reference to the variable itself cannot be changed, the contents of an 
    object or array declared with const can be modified.
- Example:
    const city = "Paris";
    // city = "London"; // Error: Assignment to constant variable.

    const user = { name: "Alice" };
    user.name = "Bob"; // Allowed, because we're modifying the object, not reassigning it

